{"meta":{"title":"Aniki","subtitle":null,"description":null,"author":"Aniki","url":"http://yoursite.com"},"pages":[{"title":"Tags","date":"2019-02-24T06:06:02.000Z","updated":"2019-02-24T07:35:04.346Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"Categories","date":"2019-02-24T06:02:24.000Z","updated":"2019-02-24T07:35:15.834Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"hexo","slug":"hexo","date":"2019-02-24T07:49:46.000Z","updated":"2019-02-24T08:05:55.930Z","comments":true,"path":"2019/02/24/hexo/","link":"","permalink":"http://yoursite.com/2019/02/24/hexo/","excerpt":"","text":"Hexo 使用记录1.安装​ hexo网页就有教程，但还是跟着视频比较合适。 ​ 下载git和node.js，node.js现场下的，git之前就有用过。node -v和git version可以查看版本 2.预处理 终端：hexo init bolog ，生成一个bolog文件夹，并有从github上的文件，算是创建网页 进入 bolog文件夹下，npm install 可以继续下载安装文件夹时失败的文件 hexo g可以generate一系列的网页模版，并在这之后生成public文件夹 hexo s可以运行端口查看网页 ，在http://localhost:4000 3.编写 题目：hexo new ‘title’可以编写一个文章，并在bolog文件夹下的source里面存放一个markdown文件，该文件只有头字段保留时间等基本信息。可以通过增加内容来写东西。 然后还是hexo g，hexo s来生成网页，这样文章就出现在了网页里面。 hexo new可以生成三种3中文本，hexo new自动生成post，即文章，hexo new draft 生成草稿，hexo new page生成网页页面，模板都在scaffolds里，需要可以修改和增加 4.front meta（文章配置） 是文章的属性信息，由md文件的—在开头括起来，由title，category，comment等属性 yaml语言编写，具体应用现学现用即可 5.配置文件 配置文件为_config.yml 不同区域还有好多个配置文件。 就是对网页，网站的一些配置，可以现学现用，而且太多。 6.hexo命令","categories":[],"tags":[]},{"title":"python","slug":"python","date":"2019-02-24T05:09:32.724Z","updated":"2019-02-24T08:44:38.276Z","comments":true,"path":"2019/02/24/python/","link":"","permalink":"http://yoursite.com/2019/02/24/python/","excerpt":"","text":"本篇文章简单讲解python 的类及format用法，内容在注释。 12345678910111213141516171819202122232425class father(object): def __init__(self,name,age): self.name = name self.age = age def walk(self): print('&#123;&#125; is walking,who is &#123;&#125; years old.'.format(self.name,self.age))#format格式化，其中&#123;&#125;和：是一个作用，实际上&#123;&#125;常用于字符串和直接输出，：常用于数字定义#format 使用。直接在format中写入变量，最好按顺序。#因为在前面&#123;&#125;内可以定义顺序0，1或者填进变量名字，只不过format中要加’=‘，或者直接输入字典。c = father('andy',22) class children(father): def __init__(self,name,age,language): super(children,self).__init__(name,age)#这里再写的时候就没有self了 '''由此可以看到，在子类继承父类属性的时候，在子类初始化的时候一定要包含了父类的全部初始化输入的，否则就不能继承属性 所以要对输入进行增加的时候可以直接继承父类属性，当不需要那么多的时候可以不继承属性。 实际上一般都继承的，因为子类的存在就是改写，对于想改的可以直接写，对于用不到的可以不用，没必要删除。''' self.language = language def eat(self): print('&#123;&#125; is walking,who is &#123;&#125; years old,and this &#123;&#125; is eating'.format(self.name,self.age,self.language))","categories":[{"name":"-code","slug":"code","permalink":"http://yoursite.com/categories/code/"}],"tags":[{"name":"-python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]}]}